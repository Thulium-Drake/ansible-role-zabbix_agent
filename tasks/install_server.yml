---
- name: 'Validate input'
  ansible.builtin.assert:
    that:
      - zabbix_server_database in zabbix_server_supported_databases
      - zabbix_server_webserver in zabbix_server_supported_webservers

- name: 'Install server packages'
  ansible.builtin.package:
    name:
      - "{{ zabbix_frontend_package }}"
      - 'zabbix-get'
      - 'zabbix-sql-scripts'
      - "zabbix-server-{{ zabbix_server_database }}"
      - "zabbix-{{ zabbix_server_webserver }}-conf"

- name: 'Ensure Firewalld ports'
  ansible.posix.firewalld:
    service: 'zabbix-server'
    state: 'enabled'
    permanent: true
    immediate: true
  when: ansible_facts['os_family'] == 'RedHat'

- name: 'Set up PostgreSQL database'
  when:
    - zabbix_server_database == 'pgsql'
    - zabbix_server_setup_database
  block:
    - name: 'Create PostgreSQL database'
      community.postgresql.postgresql_db:
        name: "{{ zabbix_server_database_name }}"
        encoding: 'Unicode'
        template: 'template0'
        owner: "{{ zabbix_server_database_user }}"
        state: 'present'
      register: 'zabbix_server_created_db'

    - name: 'Import PostgreSQL database'
      community.postgresql.postgresql_db:
        name: "{{ zabbix_server_database_name }}"
        state: 'restore'
        target: '/usr/share/doc/zabbix-sql-scripts/postgresql/server.sql.gz'
      when: zabbix_server_created_db['changed']

- name: 'Set up MySQL database'
  when:
    - zabbix_server_database == 'mysql'
    - zabbix_server_setup_database
  block:
    - name: 'Ensure extra dependencies'
      ansible.builtin.package:
        name:
          - "{{ zabbix_pymysql_package }}"
        state: 'present'

    - name: 'Create MySQL database'
      community.mysql.mysql_db:
        name: "{{ zabbix_server_database_name }}"
        collation: 'utf8_bin'
        encoding: 'utf8'
        login_host: "{{ zabbix_server_database_host }}"
        login_port: "{{ zabbix_server_database_port }}"
        login_user: "{{ zabbix_server_database_admin_user }}"
        login_password: "{{ zabbix_server_database_admin_password }}"
        check_implicit_admin: true
        state: 'present'
      register: zabbix_server_created_db

    - name: 'Create MySQL database user'
      community.mysql.mysql_user:
        name: "{{ zabbix_server_database_user }}"
        password: "{{ zabbix_server_database_password }}"
        priv: "{{ zabbix_server_database_name }}.*:ALL"
        login_host: "{{ zabbix_server_database_host }}"
        login_port: "{{ zabbix_server_database_port }}"
        login_user: "{{ zabbix_server_database_admin_user }}"
        login_password: "{{ zabbix_server_database_admin_password }}"
        check_implicit_admin: true
        state: 'present'

    - name: 'Import MySQL database'
      community.mysql.mysql_db:
        name: "{{ zabbix_server_database_name }}"
        login_host: "{{ zabbix_server_database_host }}"
        login_port: "{{ zabbix_server_database_port }}"
        login_user: "{{ zabbix_server_database_user }}"
        login_password: "{{ zabbix_server_database_password }}"
        target: '/usr/share/doc/zabbix-sql-scripts/mysql/create.sql.gz'
        state: 'import'
      when: zabbix_server_created_db['changed']

- name: 'Configure Zabbix server'
  ansible.builtin.template:
    src: 'zabbix_server.conf.j2'
    dest: '/etc/zabbix/zabbix_server.conf'
    owner: 'root'
    group: 'root'
    mode: 0644
  when: ansible_facts['os_family'] == 'RedHat'

- name: 'Configure webserver (Debian-like)'
  ansible.builtin.copy:
    src: "/etc/zabbix/{{ zabbix_server_webserver }}.conf"
    dest: "{{ zabbix_webserver_path[zabbix_server_webserver] }}"
    remote_src: true
    owner: 'root'
    group: 'root'
    mode: 0644
  when:
    - zabbix_server_configure_webserver
    - ansible_facts['os_family'] != 'RedHat'

- name: 'Configure nginx webserver (RHEL-like)'
  ansible.builtin.blockinfile:
    path: "{{ zabbix_webserver_path[zabbix_server_webserver] }}"
    block: |
      listen 80;
      server_name {{ zabbix_server_url.rpartition("//")[-1].partition("/")[0] }};
    insertafter: 'server {'
  when:
    - zabbix_server_configure_webserver
    - zabbix_server_webserver == 'nginx'
    - ansible_facts['os_family'] == 'RedHat'

- name: 'Ensure SELinux Boolean'
  ansible.posix.seboolean:
    name: 'httpd_can_connect_zabbix'
    state: true
    persistent: true
  when:
    - ansible_facts['os_family'] == 'RedHat'

- name: 'Ensure services running'
  ansible.builtin.service:
    name: "{{ service }}"
    enabled: true
    state: 'started'
  loop:
    - 'zabbix-server'
    - "{{ (zabbix_server_webserver == 'nginx') | ternary(zabbix_server_php_service[zabbix_server_webserver], omit) }}"
    - "{{ zabbix_server_webserver }}"
  loop_control:
    loop_var: 'service'
